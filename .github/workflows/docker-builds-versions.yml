name: Check latest versions

on: 
  workflow_dispatch:
  schedule:
    - cron: '30 4 1 * *'

run-name: Comparing latest versions with those in repository

jobs:
  list-repos:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.set-matrix.outputs.json }}
    steps:
      - uses: actions/checkout@main
        with:
          repository: StaPH-B/docker-builds
          
      - id: set-matrix
        name: set-matrix
        run: |
          grep github.com build-files/*/*/Dockerfile | grep LABEL | grep website | sed 's/\"//g' | sed 's/,/\t/g' | sed 's/;/\t/g' |  sed 's/ /\t/g' | cut -f 1,2 | sed 's/\r$//g' | awk '{ split($1, arr, "/"); $1=arr[1] }1' | awk '{ split($2, arr, "/"); $2=arr[4]"/"arr[5] }1' | sort | uniq | awk '{ print $1 "," $2  }' | jq -ncR '[inputs]' > files.json
          cat files.json
          echo "json=$(cat files.json)" >> $GITHUB_OUTPUT

  get-versions:
    needs: list-repos
    if: needs.list-repos.outputs.json != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repos: ${{ fromJson(needs.list-repos.outputs.json) }}
    steps:
      - uses: actions/checkout@main
        with:
          repository: StaPH-B/docker-builds
      
      - name: Parse tools and repos
        id: parse
        run: |
          tool=$(echo "${{ matrix.repos }}" | cut -f 1 -d "," )
          repo=$(echo "${{ matrix.repos }}" | cut -f 2 -d "," )
          echo "$tool,$repo"
          echo "tool=$tool" >> $GITHUB_OUTPUT
          echo "repo=$repo" >> $GITHUB_OUTPUT

      - name: Get latest release
        uses: rez0n/actions-github-release@main
        continue-on-error: true
        id: latest_release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ steps.parse.outputs.repo }}
          type: "stable"

      - name: Create filename
        if: steps.latest_release.outcome == 'success'
        id: filename
        run: |
          rand=$RANDOM
          repo=$(echo "${{ matrix.repos }}" | cut -f 2 -d "," | sed 's/\//_/g')
          date=$(date '+%Y-%m-%d')
          file=update.$date.${{ steps.parse.outputs.tool }}.$repo.$rand.${{ steps.latest_release.outputs.release }}.issue.txt
          echo $file
          echo "file=$file" >> $GITHUB_OUTPUT
          
      - name: Check Directory
        if: steps.latest_release.outcome == 'success'
        id: check_directory
        run: |
          release=$(echo ${{ steps.latest_release.outputs.release }} | sed 's/^v//g' | sed 's/^V//g')

          ls -d ./${{ steps.parse.outputs.tool }}/*

          dir=$(ls -d ./${{ steps.parse.outputs.tool }}/* | grep ${release} | head -n 1 )

          if [ -d "$dir" ] && [ -n "${{ steps.latest_release.outputs.release }}" ]
          then
            echo "Found directory for ${{ steps.parse.outputs.tool }} version ${{ steps.latest_release.outputs.release }}"
          elif [ -n "${{ steps.latest_release.outputs.release }}" ]
          then
            echo "No directory for ${{ steps.parse.outputs.tool }} version ${{ steps.latest_release.outputs.release }}!"
            echo "<br>- The tool ${{ steps.parse.outputs.tool }} is missing version ${{ steps.latest_release.outputs.release }} " > ${{ steps.filename.outputs.file }}
          else
            echo "No version for ${{ steps.parse.outputs.tool }} with ${{ steps.parse.outputs.repo }} repo!"
          fi

      - name: Creating version file
        if: steps.check_directory.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.filename.outputs.file }}
          retention-days: 1
          if-no-files-found: 'ignore'


  create-issue:
    needs: [ list-repos, get-versions ]
    runs-on: ubuntu-latest
    steps:
      - name: Downloading version file
        uses: actions/download-artifact@v3
      
      - name: Create text
        run: |
          cat ./artifact/update*issue.txt
          wget https://raw.githubusercontent.com/erinyoung/GA_testing/refs/heads/main/ignore.txt
          grep . ignore.txt > ignore.tmp
          cat ./artifact/update*issue.txt | grep -vf ignore.tmp
          echo 'ISSUE_TEXT='$(cat ./artifact/update*issue.txt | grep -vf ignore.tmp | sort | uniq) >> $GITHUB_ENV

      - name: Create Issue
        run: |
          gh issue create --title "Version check" --body "$ISSUE_TEXT" --repo $GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Compare latest versions

on: 
  workflow_dispatch:
  schedule:
    - cron: '30 4 1 * *'

run-name: Comparing latest versions with those in repository

jobs:
  list-repos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          repository: StaPH-B/docker-builds
          
      - id: list_github_repos
        name: list_github_repos
        run: |
          grep github.com build-files/*/*/Dockerfile | \
            grep LABEL | \
            grep website | \
            sed 's/\"//g' | \
            sed 's/,/\t/g' | \
            sed 's/;/\t/g' | \
            sed 's/ /\t/g' | \
            cut -f 1,2 | \
            sed 's/\r$//g' | \
            awk '{ split($1, arr, "/"); $1=arr[2] }1' | \
            awk '{ split($2, arr, "/"); $2=arr[4]"/"arr[5] }1' | \
            sort | \
            uniq | \
            awk '{ print $1 "," $2 }' > \
            github_repos.txt

      - id: list_gitlab_repos
        name: list_gitlab_repos
        run: |
          grep gitlab.com build-files/*/*/Dockerfile | \
            grep LABEL | \
            grep website | \
            sed 's/\"//g' | \
            sed 's/,/\t/g' | \
            sed 's/;/\t/g' | \
            sed 's/ /\t/g' | \
            cut -f 1,2 | \
            sed 's/\r$//g' | \
            awk '{ split($1, arr, "/"); $1=arr[2] }1' | \
            awk '{ split($2, arr, "/"); $2=arr[4]"/"arr[5] }1' | \
            sort | \
            uniq | \
            awk '{ print $1 "," $2 }' > \
            gitlab_repos.txt

      - id: check_repos
        name: check_repos
        run: | 
          cat github_repos.txt

          ls build-files/* -d | cut -f 2 -d / > all_repos.txt

      - id: find_latest_on_github
        name: find_latest_on_github
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          while read line
          do
            tool=$(echo ${line} | cut -f 1 -d "," )
            repo=$(echo ${line} | cut -f 2 -d "," )
            echo "the line is ${line}"
            echo "the tool is $tool found at repo $repo"
            release=$(gh api repos/${repo}/releases/latest --jq '.tag_name' | \
              grep -v Not | \
              grep -v latest \
              || true )
              
            if [ -z "${release}" ] 
            then 
              release=$(gh api repos/${repo}/tags --jq '.[].name' | \
                sort -V | \
                grep -v VDB-4760-2.9.7 | \
                tail -n 1 | \
                grep -v Not \
                || true ) 
            fi

            release=$(echo $release | \
              sed 's/-docker5//g' | \
              sed 's/^v//g' | \
              sed 's/^V//g' | \
              sed 's/amrfinder_v//g' | \
              sed 's/quast_//g' | \
              sed 's/adr-//g' | \
              sed 's/-beta//g' )

            if [ -n "${release}" ]
            then
              echo "the latest release is ${release}"
              dir=$(ls -d ./build-files/${tool}/* | grep ${release} | head -n 1)

              grep -v $tool all_repos.txt > all_repos.txt.tmp
              mv all_repos.txt.tmp all_repos.txt

              if [ -d "$dir" ]
              then
                echo "Found directory for ${tool} version ${release}"
              else 
                echo "No directory for ${tool} version ${release}!"
                echo "<br>- The tool ${tool} is missing version ${release}" >> issue_text.txt
              fi
            else
              echo "No version for ${tool} with ${repo} repo!"
            fi
          done < github_repos.txt

      - name: find_latest_on_gitlab
        run: |
          while read line
          do
            tool=$(echo ${line} | cut -f 1 -d "," )
            repo=$(echo ${line} | cut -f 2 -d "," )
            echo "the line is ${line}"
            echo "the tool is $tool found at repo $repo"
            project_id=$(curl \
              --silent \
              "https://gitlab.com/api/v4/projects/$(echo -n '${repo}' | jq -sRr @uri)" \
              | jq '.id')
            echo "The project id for ${repo} is ${project_id}"
            
            release=$(curl -s https://gitlab.com/api/v4/projects/1544766/releases/ | \
              jq '.[]' | \
              jq -r '.name' | \
              sort -V | \
              tail -n 1 | \
              grep -v Not | \
              grep -v latest \
              || true )

            release=$(echo $release | \
              sed 's/^v//g' | \
              sed 's/^V//g' )

            if [ -n "${release}" ]
            then
              echo "the latest release is ${release}"
              dir=$(ls -d ./build-files/${tool}/* | grep ${release} | head -n 1)

              grep -v $tool all_repos.txt > all_repos.txt.tmp
              mv all_repos.txt.tmp all_repos.txt

              if [ -d "$dir" ]
              then
                echo "Found directory for ${tool} version ${release}"
              else 
                echo "No directory for ${tool} version ${release}!"
                echo "<br>- The tool ${tool} is missing version ${release}" >> issue_text.txt
              fi
            else
              echo "No version for ${tool} with ${repo} repo!"
            fi
          done < gitlab_repos.txt      

      - name: check_blast
        id: check_blast
        run: | 
         release=$(curl -s https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ | \
           grep -oP 'ncbi-blast-\K[0-9]+\.[0-9]+\.[0-9]+' | \
           sort -V | \
           tail -1)
          
          dir=$(ls -d ./build-files/blast/* | grep ${release} | head -n 1)
          grep -v blast all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for blast version ${release}"
          else 
            echo "No directory for blast version ${release}!"
            echo "<br>- The tool blast is missing version ${release}" >> issue_text.txt
          fi

      - name: check_bbmap
        id: check_bbmap
        run: |
          release=$(curl -s "https://sourceforge.net/projects/bbmap/files/" | \
            grep -oP '(?<=/projects/bbmap/files/)[^/"]+' | \
            grep -oP '[0-9]+\.[0-9]+' | \
            sort -V | \
            tail -n1)
          
          dir=$(ls -d ./build-files/bbtools/* | grep ${release} | head -n 1)
          grep -v bbtools all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for bbtools version ${release}"
          else 
            echo "No directory for bbtools version ${release}!"
            echo "<br>- The tool bbtools is missing version ${release}" >> issue_text.txt
          fi

      - name: check_busco
        id: check_busco
        run: |
            release=$(curl --silent "https://gitlab.com/api/v4/projects/1544766/releases" | jq -r '.[0].tag_name')
            
            dir=$(ls -d ./build-files/busco/* | grep ${release} | head -n 1)
            grep -v busco all_repos.txt > all_repos.txt.tmp
            mv all_repos.txt.tmp all_repos.txt
            if [ -d "$dir" ]
            then
              echo "Found directory for busco version ${release}"
            else 
              echo "No directory for busco version ${release}!"
              echo "<br>- The tool busco is missing version ${release}" >> issue_text.txt
            fi


      - name: check_checkv
        id: check_checkv
        run: |
          release=$(git ls-remote --tags https://bitbucket.org/berkeleylab/checkv.git | \
            awk -F/ '{print $NF}' | \
            sort -V | \
            grep -v "\^" | \
            sed 's/v//g' | \
            tail -n 1 )
                
          dir=$(ls -d ./build-files/checkv/* | grep ${release} | head -n 1)
          grep -v checkv all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for checkv version ${release}"
          else 
            echo "No directory for checkv version ${release}!"
            echo "<br>- The tool checkv is missing version ${release}" >> issue_text.txt
          fi


      - name: check_kma
        id: check_kma
        run: |
            release=$(git ls-remote --tags https://bitbucket.org/genomicepidemiology/kma.git | \
              awk -F/ '{print $NF}' | \
              sort -V | \
              grep -v "\^" | \
              sed 's/^v//g' | \
              tail -n 1 )
                  
            dir=$(ls -d ./build-files/kma/* | grep ${release} | head -n 1)
            grep -v kma all_repos.txt > all_repos.txt.tmp
            mv all_repos.txt.tmp all_repos.txt
            if [ -d "$dir" ]
            then
              echo "Found directory for kma version ${release}"
            else 
              echo "No directory for kma version ${release}!"
              echo "<br>- The tool kma is missing version ${release}" >> issue_text.txt
            fi

      - name: check_plasmidfinder
        id: check_plasmidfinder
        run: |
            release=$(git ls-remote --tags https://bitbucket.org/genomicepidemiology/plasmidfinder.git | \
                awk -F/ '{print $NF}' | \
                sort -V | \
                grep -v "\^" | \
                sed 's/v//g' | \
                tail -n 1 )
                    
              dir=$(ls -d ./build-files/plasmidfinder/* | grep ${release} | head -n 1)
              grep -v plasmidfinder all_repos.txt > all_repos.txt.tmp
              mv all_repos.txt.tmp all_repos.txt
              if [ -d "$dir" ]
              then
                echo "Found directory for plasmidfinder version ${release}"
              else 
                echo "No directory for plasmidfinder version ${release}!"
                echo "<br>- The tool plasmidfinder is missing version ${release}" >> issue_text.txt
              fi


      - name: check_resfinder
        id: check_resfinder
        run: |
          release=$(git ls-remote --tags https://bitbucket.org/genomicepidemiology/resfinder.git | \
            awk -F/ '{print $NF}' | \
            sort -V | \
            grep -v test | \
            grep -v EFSA | \
            grep -v "\^" | \
            sed 's/v//g' | \
            tail -n 1 )
                
          dir=$(ls -d ./build-files/resfinder/* | grep ${release} | head -n 1)
          grep -v resfinder all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for resfinder version ${release}"
          else 
            echo "No directory for resfinder version ${release}!"
            echo "<br>- The tool resfinder is missing version ${release}" >> issue_text.txt
          fi


      - name: serotypefinder
        id: check_serotypefinder
        run: |
          release=$(git ls-remote --tags https://bitbucket.org/genomicepidemiology/serotypefinder.git | \
            awk -F/ '{print $NF}' | \
            sort -V | \
            grep -v "\^" | \
            sed 's/v//g' | \
            tail -n 1 )
                
          dir=$(ls -d ./build-files/serotypefinder/* | grep ${release} | head -n 1)
          grep -v serotypefinder all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for serotypefinder version ${release}"
          else 
            echo "No directory for serotypefinder version ${release}!"
            echo "<br>- The tool serotypefinder is missing version ${release}" >> issue_text.txt
          fi

      - name: check_virulencefinder
        id: check_virulencefinder
        run: |
          release=$(git ls-remote --tags https://bitbucket.org/genomicepidemiology/virulencefinder.git | \
            awk -F/ '{print $NF}' | \
            sort -V | \
            grep -v "\^" | \
            sed 's/v//g' | \
            tail -n 1 )
                
          dir=$(ls -d ./build-files/virulencefinder/* | grep ${release} | head -n 1)
          grep -v virulencefinder all_repos.txt > all_repos.txt.tmp
          mv all_repos.txt.tmp all_repos.txt
          if [ -d "$dir" ]
          then
            echo "Found directory for virulencefinder version ${release}"
          else 
            echo "No directory for virulencefinder version ${release}!"
            echo "<br>- The tool virulencefinder is missing version ${release}" >> issue_text.txt
          fi


      - name: list_unversioned
        id: list_unversioned
        run: |
          cat all_repos.txt | awk '{print "<br>- The tool " $0 " is not checked"}' >> issue_text.txt

      - name: check_text
        id: check_text
        run: cat issue_text.txt

      - name: Create text
        run: |
          wget https://raw.githubusercontent.com/erinyoung/GA_testing/refs/heads/main/ignore.txt
          grep . ignore.txt > ignore.tmp
          cat issue_text.txt | grep -vf ignore.tmp | sort | uniq > issue_filtered.txt
          wordcount=$(wc -l issue_filtered.txt | awk '{print $1}' )
          echo "<br>- There are ${wordcount} images that need updates" >> issue_filtered.txt
          echo 'ISSUE_TEXT='$(cat issue_filtered.txt) >> $GITHUB_ENV

      - name: Create Issue
        run: |
          gh issue create --title "Version comparison" --body "$ISSUE_TEXT" --repo $GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
